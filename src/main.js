// Generated by CoffeeScript 1.10.0
var BrowserWindow, _, app, dictLines, fs, globalShortcut, jpconv, loadDict, mainWindow, mainWindowSize, path, setBrowserVisibility, xml;

app = require('app');

_ = require('underscore');

fs = require('fs');

xml = require('xml2js');

path = require('path');

jpconv = require('jp-conversion');

globalShortcut = require('global-shortcut');

BrowserWindow = require('browser-window');

require('crash-reporter').start();

dictLines = [];

loadDict = function(dictName) {
  path = __dirname + "/dict/" + dictName + ".json";
  return fs.readFile(path, 'utf8', function(err, data) {
    var json;
    json = JSON.parse(data);
    json.forEach(function(entry) {
      return dictLines.push(entry);
    });
    return console.log(dictLines.length);
  });
};

loadDict('youdao_lite');

loadDict('edict2u_lite');

mainWindow = null;

mainWindowSize = {
  height: 80,
  width: 500
};

app.on('window-all-closed', function() {
  if (process.platform !== 'darwin') {
    return app.quit();
  }
});

app.on('ready', function() {
  var showWindowHotkey;
  mainWindow = new BrowserWindow({
    width: mainWindowSize.width,
    height: mainWindowSize.height,
    "always-on-top": true,
    "skip-taskbar": false,
    frame: false
  });
  mainWindow.loadUrl("file://" + __dirname + "/index.html");
  mainWindow.on('closed', function() {
    return mainWindow = null;
  });
  mainWindow.on('blur', function() {
    return setBrowserVisibility(false);
  });
  return showWindowHotkey = globalShortcut.register('shift+ctrl+space', function() {
    return setBrowserVisibility(true);
  });
});

setBrowserVisibility = function(visibility) {
  if (visibility) {
    mainWindow.show();
    return app.emit('onBrowserWindowShow');
  } else {
    mainWindow.hide();
    return app.emit('onBrowserWindowHide');
  }
};

app.on('keyup', function(keyword) {
  var ret;
  if (keyword.length !== 0) {
    ret = _.chain(dictLines).filter(function(dict) {
      if (dict.indexer.indexOf(keyword.toLowerCase()) === 0) {
        return true;
      }
    }).first(4).value();
  } else {
    ret = [];
  }
  return app.emit('updateSearchResult', ret);
});

app.on('windowVisible', function(visibility) {
  return setBrowserVisibility(visibility);
});

app.on('windowResultHeight', function(height) {
  var maxHeight;
  maxHeight = 500;
  while (height > maxHeight) {
    height -= 82;
  }
  return mainWindow.setSize(mainWindowSize.width, height);
});
